AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Sample SAM Template for aws-dotnet-textract

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod


Globals:
  # Global attributes for each function
  Function:
    Timeout: 120
    Runtime: dotnet6
    MemorySize: 256
    Architectures:
      - arm64
    Environment:
      Variables:
        STAGE_NAME: !Ref Environment



Resources:
#Functions
  SendToTextract:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SendToTextract
      CodeUri: ./src/ServerlessTextToSpeech.SendToTextract
      Handler: ServerlessTextToSpeech.SendToTextract
      Environment:
        Variables:
          TEXTRACT_ROLE: !GetAtt TextractRole.Arn
          TEXTRACT_TOPIC: !Ref TextractTopic
          OUTPUT_BUCKET: !Ref OutputBucket
          OUTPUT_PREFIX: output
      Policies:
        - arn:aws:iam::aws:policy/AmazonTextractFullAccess
        - S3CrudPolicy:
            BucketName: !Ref SourceBucket

  NotifyTextractComplete:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: NotifyTextractComplete
      CodeUri: ./src/ServerlessTextToSpeech.CompleteTextract
      Handler: ServerlessTextToSpeech.CompleteTextract
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !GetAtt MetaDataTable.Arn
        - SNSCrudPolicy:
            TopicName: !Ref TextractTopic
        - Statement:
          - Sid: StepFunctions
            Effect: Allow
            Action:
            - states:SendTaskSuccess
            - states:SendTaskFailure
            - states:SendTaskHeartbeat
            Resource: '*'


      Events:
        TextractTopicEvent:
          Type: SNS
          Properties:
            Topic: !Ref TextractTopic


  PublishMetaData:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PublishMetaData
      CodeUri: ./src/ServerlessTextToSpeech.PublishMetaData
      Handler: ServerlessTextToSpeech.PublishMetaData
      Environment:
        Variables:
          METADATA_TABLE: !Ref MetaDataTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !GetAtt  MetaDataTable.Arn
        - S3CrudPolicy:
            BucketName: !Ref SoundBucket


  ProcessText:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ProcessText
      CodeUri: ./src/ServerlessTextToSpeech.ProcessText
      Handler: ServerlessTextToSpeech.ProcessText
      Environment:
        Variables:
          INPUT_BUCKET: !Ref SourceBucket
          OUTPUT_BUCKET: !Ref OutputBucket
      Policies:
        - arn:aws:iam::aws:policy/AmazonPollyFullAccess
        - S3CrudPolicy:
            BucketName: !Ref OutputBucket
#S3 buckets
  SourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join [ "-", ["serverless-source-data", !Ref Environment]]
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true


  OutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join [ "-", ["serverless-output-data", !Ref Environment]]
  SoundBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join [ "-", ["serverless-sound-files", !Ref Environment]]
#Database
  MetaDataTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Join ["-", [!Ref Environment, "TextToSpeechData"]]

#EventBridge
  NotifyFileUploadedRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Triggers a step function based on an upload to S3"
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - 'Object Created'
        detail:
          bucket:
            name:
            - !Ref SourceBucket
      Targets:
        -
          Arn:
            !GetAtt ProcessStateMachine.Arn
          RoleArn: !GetAtt StateMachineEventRole.Arn
          Id: stepFunctionExecution
  StateMachineEventRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - events.amazonaws.com
              Action: sts:AssumeRole
        Path: /
        Policies:
          -
            PolicyName: statemachine-execution
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                -
                  Effect: Allow
                  Action: states:StartExecution
                  Resource: !GetAtt ProcessStateMachine.Arn


#Step Function and related data
  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", ["stepfunction-role", !Ref Environment]]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - textract:StartDocumentAnalysis
              Resource: "*"
          PolicyName: TextractExecution
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: PublishSNS
              Effect: Allow
              Action:
              - sns:Publish
              Resource:
                - !Ref SuccessTopic
                - !Ref FailureTopic
            - Sid: InvokeLambda
              Effect: Allow
              Action:
              - lambda:InvokeFunction
              Resource:
                - !GetAtt SendToTextract.Arn
                - !GetAtt PublishMetaData.Arn
                - !GetAtt ProcessText.Arn
            - Sid: GetSourceData
              Effect: Allow
              Action: s3:Get*
              Resource: !Join ["/", [!GetAtt SourceBucket.Arn, "*" ]]
          PolicyName: LambdaExecution
  ProcessStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: "TextToSpeechStateMachine"
      Type: STANDARD
      DefinitionUri: ./statemachine.asl.yaml
      DefinitionSubstitutions:
        TextractOutputBucket: !Ref OutputBucket
        SendToTextractFunction: !GetAtt   SendToTextract.Arn
        PublishMetadataFunction: !GetAtt PublishMetaData.Arn
        ProcessTextFunction: !GetAtt ProcessText.Arn
        SuccessTopic: !Ref SuccessTopic
        FailureTopic: !Ref FailureTopic
        MetadataTable: !GetAtt MetaDataTable.Arn
        TextractTopic: !Ref TextractTopic
        TextractRole: !GetAtt TextractRole.Arn
      Role: !GetAtt StateMachineRole.Arn

  TextractRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", ["textract-role", !Ref Environment]]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - textract.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: PublishSns
              Effect: Allow
              Action:
              - sns:Publish
              Resource:
                - !Ref TextractTopic
            - Sid: GetSourceData
              Effect: Allow
              Action: s3:Get*
              Resource: !Join ["/", [!GetAtt SourceBucket.Arn, "*" ]]
            - Sid: WriteDestinationData
              Effect: Allow
              Action: s3:PutObject
              Resource: !Join ["/", [!GetAtt OutputBucket.Arn, "*" ]]
          PolicyName: TextractRole
#SNS Topics
  TextractTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: TextractTopic
      TopicName: !Join ["-", ["TextractNotify", !Ref Environment] ]
  SuccessTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: TextToSpeechSuccessTopic
      TopicName: !Join ["-", ["TextToSpeechSuccess", !Ref Environment] ]

  FailureTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: TextToSpeechFailureTopic
      TopicName: !Join ["-", ["TextToSpeechFailure", !Ref Environment] ]


